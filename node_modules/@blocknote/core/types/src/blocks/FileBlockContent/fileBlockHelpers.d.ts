import type { BlockNoteEditor } from "../../editor/BlockNoteEditor.js";
import { BlockFromConfig, BlockSchemaWithBlock, FileBlockConfig } from "../../schema/index.js";
export declare const FILE_ICON_SVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\"></path></svg>";
export declare const createFileBlockWrapper: (block: BlockFromConfig<FileBlockConfig, any, any>, editor: BlockNoteEditor<BlockSchemaWithBlock<FileBlockConfig["type"], FileBlockConfig>, any, any>, element: {
    dom: HTMLElement;
    destroy?: () => void;
}, buttonText?: string, buttonIcon?: HTMLElement) => {
    dom: HTMLDivElement;
    destroy?: undefined;
} | {
    dom: HTMLDivElement;
    destroy: (() => void) | undefined;
};
export declare const createDefaultFilePreview: (block: BlockFromConfig<FileBlockConfig, any, any>) => {
    dom: HTMLElement;
    destroy?: () => void;
};
export declare const createFileAndCaptionWrapper: (block: BlockFromConfig<FileBlockConfig, any, any>, file: HTMLElement) => {
    dom: HTMLDivElement;
};
export declare const createAddFileButton: (block: BlockFromConfig<FileBlockConfig, any, any>, editor: BlockNoteEditor<any, any, any>, buttonText?: string, buttonIcon?: HTMLElement) => {
    dom: HTMLDivElement;
    destroy: () => void;
};
export declare const parseEmbedElement: (embedElement: HTMLEmbedElement) => {
    url: string | undefined;
};
export declare const parseFigureElement: (figureElement: HTMLElement, targetTag: string) => {
    targetElement: HTMLElement;
    caption: string | undefined;
} | undefined;
export declare const createLinkWithCaption: (element: HTMLElement, caption: string) => {
    dom: HTMLDivElement;
};
export declare const createFigureWithCaption: (element: HTMLElement, caption: string) => {
    dom: HTMLElement;
};
export declare const createResizeHandlesWrapper: (block: BlockFromConfig<FileBlockConfig, any, any>, editor: BlockNoteEditor<any, any, any>, element: HTMLElement, getWidth: () => number, setWidth: (width: number) => void) => {
    dom: HTMLElement;
    destroy: () => void;
};
