import { isNodeSelection, isTextSelection, posToDOMRect } from "@tiptap/core";
import { Plugin, PluginKey } from "prosemirror-state";
import { EventEmitter } from "../../util/EventEmitter.js";
export class FormattingToolbarView {
    editor;
    pmView;
    state;
    emitUpdate;
    preventHide = false;
    preventShow = false;
    shouldShow = ({ state, from, to, view }) => {
        const { doc, selection } = state;
        const { empty } = selection;
        // Sometime check for `empty` is not enough.
        // Doubleclick an empty paragraph returns a node size of 2.
        // So we check also for an empty text size.
        const isEmptyTextBlock = !doc.textBetween(from, to).length && isTextSelection(state.selection);
        // Don't show toolbar inside code blocks
        if (selection.$from.parent.type.spec.code ||
            (isNodeSelection(selection) && selection.node.type.spec.code)) {
            return false;
        }
        // check view.hasFocus so that the toolbar doesn't show up when the editor is not focused or when for example a code block is focused
        return !(!view.hasFocus() || empty || isEmptyTextBlock);
    };
    constructor(editor, pmView, emitUpdate) {
        this.editor = editor;
        this.pmView = pmView;
        this.emitUpdate = () => {
            if (!this.state) {
                throw new Error("Attempting to update uninitialized formatting toolbar");
            }
            emitUpdate(this.state);
        };
        pmView.dom.addEventListener("mousedown", this.viewMousedownHandler);
        pmView.dom.addEventListener("mouseup", this.viewMouseupHandler);
        pmView.dom.addEventListener("dragstart", this.dragHandler);
        pmView.dom.addEventListener("dragover", this.dragHandler);
        pmView.dom.addEventListener("blur", this.blurHandler);
        // Setting capture=true ensures that any parent container of the editor that
        // gets scrolled will trigger the scroll event. Scroll events do not bubble
        // and so won't propagate to the document by default.
        pmView.root.addEventListener("scroll", this.scrollHandler, true);
    }
    blurHandler = (event) => {
        if (this.preventHide) {
            this.preventHide = false;
            return;
        }
        const editorWrapper = this.pmView.dom.parentElement;
        // Checks if the focus is moving to an element outside the editor. If it is,
        // the toolbar is hidden.
        if (
        // An element is clicked.
        event &&
            event.relatedTarget &&
            // Element is inside the editor.
            (editorWrapper === event.relatedTarget ||
                editorWrapper.contains(event.relatedTarget) ||
                event.relatedTarget.matches(".bn-ui-container, .bn-ui-container *"))) {
            return;
        }
        if (this.state?.show) {
            this.state.show = false;
            this.emitUpdate();
        }
    };
    viewMousedownHandler = () => {
        this.preventShow = true;
    };
    viewMouseupHandler = () => {
        this.preventShow = false;
        setTimeout(() => this.update(this.pmView));
    };
    // For dragging the whole editor.
    dragHandler = () => {
        if (this.state?.show) {
            this.state.show = false;
            this.emitUpdate();
        }
    };
    scrollHandler = () => {
        if (this.state?.show) {
            this.state.referencePos = this.getSelectionBoundingBox();
            this.emitUpdate();
        }
    };
    update(view, oldState) {
        // Delays the update to handle edge case with drag and drop, where the view
        // is blurred asynchronously and happens only after the state update.
        // Wrapping in a setTimeout gives enough time to wait for the blur event to
        // occur before updating the toolbar.
        const { state, composing } = view;
        const { doc, selection } = state;
        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);
        if (composing || isSame) {
            return;
        }
        // support for CellSelections
        const { ranges } = selection;
        const from = Math.min(...ranges.map((range) => range.$from.pos));
        const to = Math.max(...ranges.map((range) => range.$to.pos));
        const shouldShow = this.shouldShow?.({
            view,
            state,
            from,
            to,
        });
        // Checks if menu should be shown/updated.
        if (!this.preventShow && (shouldShow || this.preventHide)) {
            // Unlike other UI elements, we don't prevent the formatting toolbar from
            // showing when the editor is not editable. This is because some buttons,
            // e.g. the download file button, should still be accessible. Therefore,
            // logic for hiding when the editor is non-editable is handled
            // individually in each button.
            this.state = {
                show: true,
                referencePos: this.getSelectionBoundingBox(),
            };
            this.emitUpdate();
            return;
        }
        // Checks if menu should be hidden.
        if (this.state?.show &&
            !this.preventHide &&
            (!shouldShow || this.preventShow || !this.editor.isEditable)) {
            this.state.show = false;
            this.emitUpdate();
            return;
        }
    }
    destroy() {
        this.pmView.dom.removeEventListener("mousedown", this.viewMousedownHandler);
        this.pmView.dom.removeEventListener("mouseup", this.viewMouseupHandler);
        this.pmView.dom.removeEventListener("dragstart", this.dragHandler);
        this.pmView.dom.removeEventListener("dragover", this.dragHandler);
        this.pmView.dom.removeEventListener("blur", this.blurHandler);
        this.pmView.root.removeEventListener("scroll", this.scrollHandler, true);
    }
    closeMenu = () => {
        if (this.state?.show) {
            this.state.show = false;
            this.emitUpdate();
        }
    };
    getSelectionBoundingBox() {
        const { state } = this.pmView;
        const { selection } = state;
        // support for CellSelections
        const { ranges } = selection;
        const from = Math.min(...ranges.map((range) => range.$from.pos));
        const to = Math.max(...ranges.map((range) => range.$to.pos));
        if (isNodeSelection(selection)) {
            const node = this.pmView.nodeDOM(from);
            if (node) {
                return node.getBoundingClientRect();
            }
        }
        return posToDOMRect(this.pmView, from, to);
    }
}
export const formattingToolbarPluginKey = new PluginKey("FormattingToolbarPlugin");
export class FormattingToolbarProsemirrorPlugin extends EventEmitter {
    view;
    plugin;
    constructor(editor) {
        super();
        this.plugin = new Plugin({
            key: formattingToolbarPluginKey,
            view: (editorView) => {
                this.view = new FormattingToolbarView(editor, editorView, (state) => {
                    this.emit("update", state);
                });
                return this.view;
            },
            props: {
                handleKeyDown: (_view, event) => {
                    if (event.key === "Escape" && this.shown) {
                        this.view.closeMenu();
                        return true;
                    }
                    return false;
                },
            },
        });
    }
    get shown() {
        return this.view?.state?.show || false;
    }
    onUpdate(callback) {
        return this.on("update", callback);
    }
    closeMenu = () => this.view.closeMenu();
}
//# sourceMappingURL=FormattingToolbarPlugin.js.map