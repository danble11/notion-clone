import { Extension } from "@tiptap/core";
import { Plugin } from "prosemirror-state";
import { nestedListsToBlockNoteStructure } from "../../parsers/html/util/nestedLists.js";
import { acceptedMIMETypes } from "./acceptedMIMETypes.js";
import { handleFileInsertion } from "./handleFileInsertion.js";
import { handleVSCodePaste } from "./handleVSCodePaste.js";
export const createPasteFromClipboardExtension = (editor) => Extension.create({
    name: "pasteFromClipboard",
    addProseMirrorPlugins() {
        return [
            new Plugin({
                props: {
                    handleDOMEvents: {
                        paste(_view, event) {
                            event.preventDefault();
                            if (!editor.isEditable) {
                                return;
                            }
                            let format;
                            for (const mimeType of acceptedMIMETypes) {
                                if (event.clipboardData.types.includes(mimeType)) {
                                    format = mimeType;
                                    break;
                                }
                            }
                            if (!format) {
                                return true;
                            }
                            if (format === "vscode-editor-data") {
                                handleVSCodePaste(event, editor);
                                return true;
                            }
                            if (format === "Files") {
                                handleFileInsertion(event, editor);
                                return true;
                            }
                            let data = event.clipboardData.getData(format);
                            if (format === "blocknote/html") {
                                editor._tiptapEditor.view.pasteHTML(data);
                                return true;
                            }
                            if (format === "text/html") {
                                const htmlNode = nestedListsToBlockNoteStructure(data.trim());
                                data = htmlNode.innerHTML;
                                editor._tiptapEditor.view.pasteHTML(data);
                                return true;
                            }
                            editor._tiptapEditor.view.pasteText(data);
                            return true;
                        },
                    },
                },
            }),
        ];
    },
});
//# sourceMappingURL=pasteExtension.js.map