import UniqueID from "../../extensions/UniqueID/UniqueID.js";
import { isPartialLinkInlineContent, isStyledTextInlineContent, } from "../../schema/inlineContent/types.js";
function textShorthandToStyledText(content = "") {
    if (typeof content === "string") {
        return [
            {
                type: "text",
                text: content,
                styles: {},
            },
        ];
    }
    return content;
}
function partialContentToInlineContent(content) {
    if (typeof content === "string") {
        return textShorthandToStyledText(content);
    }
    if (Array.isArray(content)) {
        return content.flatMap((partialContent) => {
            if (typeof partialContent === "string") {
                return textShorthandToStyledText(partialContent);
            }
            else if (isPartialLinkInlineContent(partialContent)) {
                return {
                    ...partialContent,
                    content: textShorthandToStyledText(partialContent.content),
                };
            }
            else if (isStyledTextInlineContent(partialContent)) {
                return partialContent;
            }
            else {
                // custom inline content
                return {
                    props: {},
                    ...partialContent,
                    content: partialContentToInlineContent(partialContent.content),
                };
            }
        });
    }
    else if (content?.type === "tableContent") {
        return {
            type: "tableContent",
            columnWidths: content.columnWidths,
            rows: content.rows.map((row) => ({
                ...row,
                cells: row.cells.map((cell) => partialContentToInlineContent(cell)),
            })),
        };
    }
    return content;
}
export function partialBlocksToBlocksForTesting(schema, partialBlocks) {
    return partialBlocks.map((partialBlock) => partialBlockToBlockForTesting(schema.blockSchema, partialBlock));
}
export function partialBlockToBlockForTesting(schema, partialBlock) {
    const contentType = schema[partialBlock.type].content;
    const withDefaults = {
        id: "",
        type: partialBlock.type,
        props: {},
        content: contentType === "inline"
            ? []
            : contentType === "table"
                ? { type: "tableContent", columnWidths: [], rows: [] }
                : undefined,
        children: [],
        ...partialBlock,
    };
    Object.entries(schema[partialBlock.type].propSchema).forEach(([propKey, propValue]) => {
        if (withDefaults.props[propKey] === undefined) {
            withDefaults.props[propKey] = propValue.default;
        }
    });
    if (contentType === "inline") {
        const content = withDefaults.content;
        withDefaults.content = partialContentToInlineContent(content);
    }
    else if (contentType === "table") {
        const content = withDefaults.content;
        withDefaults.content = {
            type: "tableContent",
            columnWidths: content?.columnWidths ||
                content?.rows[0]?.cells.map(() => undefined) ||
                [],
            rows: content?.rows.map((row) => ({
                cells: row.cells.map((cell) => partialContentToInlineContent(cell)),
            })) || [],
        };
    }
    return {
        ...withDefaults,
        content: partialContentToInlineContent(withDefaults.content),
        children: withDefaults.children.map((c) => {
            return partialBlockToBlockForTesting(schema, c);
        }),
    };
}
export function addIdsToBlock(block) {
    if (!block.id) {
        block.id = UniqueID.options.generateID();
    }
    if (block.children) {
        addIdsToBlocks(block.children);
    }
}
export function addIdsToBlocks(blocks) {
    for (const block of blocks) {
        addIdsToBlock(block);
    }
}
//# sourceMappingURL=partialBlockTestUtil.js.map