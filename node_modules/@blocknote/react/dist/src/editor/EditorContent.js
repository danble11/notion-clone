import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { createPortal } from "react-dom";
const Portals = ({ renderers, }) => {
    return (_jsx(_Fragment, { children: Object.entries(renderers).map(([key, renderer]) => {
            return createPortal(renderer.reactElement, renderer.element, key);
        }) }));
};
/**
 * Replacement of https://github.com/ueberdosis/tiptap/blob/6676c7e034a46117afdde560a1b25fe75411a21d/packages/react/src/EditorContent.tsx
 * that only takes care of the Portals.
 *
 * Original implementation is messy, and we use a "mount" system in BlockNoteTiptapEditor.tsx that makes this cleaner
 */
export function EditorContent(props) {
    const [renderers, setRenderers] = useState({});
    useEffect(() => {
        props.editor._tiptapEditor.contentComponent = {
            /**
             * Used by TipTap
             */
            setRenderer(id, renderer) {
                setRenderers((renderers) => ({ ...renderers, [id]: renderer }));
            },
            /**
             * Used by TipTap
             */
            removeRenderer(id) {
                setRenderers((renderers) => {
                    const nextRenderers = { ...renderers };
                    delete nextRenderers[id];
                    return nextRenderers;
                });
            },
        };
        // Without queueMicrotask, custom IC / styles will give a React FlushSync error
        queueMicrotask(() => {
            props.editor._tiptapEditor.createNodeViews();
        });
        return () => {
            props.editor._tiptapEditor.contentComponent = null;
        };
    }, [props.editor._tiptapEditor]);
    return (_jsxs(_Fragment, { children: [_jsx(Portals, { renderers: renderers }), props.children] }));
}
//# sourceMappingURL=EditorContent.js.map