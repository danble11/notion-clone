import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useImperativeHandle, useState } from "react";
import { createPortal, flushSync } from "react-dom";
/**
 * A helper component to render a single element to a container so we can subsequently read the DOM / HTML contents
 *
 * This is useful so we can render arbitrary React elements (blocks) in the correct context (used by `ReactRenderUtil`)
 */
export const ElementRenderer = forwardRef((_props, ref) => {
    const [singleRenderData, setSingleRenderData] = useState();
    useImperativeHandle(ref, () => {
        return (node, container) => {
            flushSync(() => {
                setSingleRenderData({ node, container });
            });
            // clear after it's been rendered to `container`
            setSingleRenderData(undefined);
        };
    }, []);
    return (_jsx(_Fragment, { children: singleRenderData &&
            createPortal(singleRenderData.node, singleRenderData.container) }));
});
//# sourceMappingURL=ElementRenderer.js.map