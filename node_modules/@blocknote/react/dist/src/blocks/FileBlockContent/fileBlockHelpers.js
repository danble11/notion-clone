import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useCallback, useEffect, useState } from "react";
import { RiFile2Line } from "react-icons/ri";
import { useUploadLoading } from "../../hooks/useUploadLoading.js";
import { useDictionary } from "../../i18n/dictionary.js";
export const FileBlockWrapper = (props) => {
    const showLoader = useUploadLoading(props.block.id);
    if (showLoader) {
        return _jsx("div", { className: "bn-file-loading-preview", children: "Loading..." });
    }
    return (_jsx("div", { className: "bn-file-block-content-wrapper", children: props.block.props.url === "" ? (_jsx(AddFileButton, { ...props })) : props.block.props.showPreview === false ? (_jsx(FileAndCaptionWrapper, { block: props.block, editor: props.editor, children: _jsx(DefaultFilePreview, { block: props.block, editor: props.editor }) })) : (_jsx(FileAndCaptionWrapper, { block: props.block, editor: props.editor, children: props.children })) }));
};
export const DefaultFilePreview = (props) => (_jsxs("div", { className: "bn-file-default-preview", contentEditable: false, draggable: false, children: [_jsx("div", { className: "bn-file-default-preview-icon", children: _jsx(RiFile2Line, { size: 24 }) }), _jsx("p", { className: "bn-file-default-preview-name", children: props.block.props.name })] }));
export const FileAndCaptionWrapper = (props) => {
    return (_jsxs("div", { className: "bn-file-and-caption-wrapper", children: [props.children, props.block.props.caption && (_jsx("p", { className: "bn-file-caption", children: props.block.props.caption }))] }));
};
export const AddFileButton = (props) => {
    const dict = useDictionary();
    // Prevents focus from moving to the button.
    const addFileButtonMouseDownHandler = useCallback((event) => {
        event.preventDefault();
    }, []);
    // Opens the file toolbar.
    const addFileButtonClickHandler = useCallback(() => {
        props.editor.dispatch(props.editor._tiptapEditor.state.tr.setMeta(props.editor.filePanel.plugin, {
            block: props.block,
        }));
    }, [props.block, props.editor]);
    return (_jsxs("div", { className: "bn-add-file-button", onMouseDown: addFileButtonMouseDownHandler, onClick: addFileButtonClickHandler, children: [_jsx("div", { className: "bn-add-file-button-icon", children: props.buttonIcon || _jsx(RiFile2Line, { size: 24 }) }), _jsx("div", { className: "bn-add-file-button-text", children: props.buttonText || dict.file_blocks.file.add_button_text })] }));
};
export const LinkWithCaption = (props) => (_jsxs("div", { children: [props.children, _jsx("p", { children: props.caption })] }));
export const FigureWithCaption = (props) => (_jsxs("figure", { children: [props.children, _jsx("figcaption", { children: props.caption })] }));
export const ResizeHandlesWrapper = (props) => {
    const [childHovered, setChildHovered] = useState(false);
    const [resizeParams, setResizeParams] = useState(undefined);
    useEffect(() => {
        // Updates the child width with an updated width depending on the cursor X
        // offset from when the resize began, and which resize handle is being used.
        const windowMouseMoveHandler = (event) => {
            let newWidth;
            if (props.block.props.textAlignment === "center") {
                if (resizeParams.handleUsed === "left") {
                    newWidth =
                        resizeParams.initialWidth +
                            (resizeParams.initialClientX - event.clientX) * 2;
                }
                else {
                    newWidth =
                        resizeParams.initialWidth +
                            (event.clientX - resizeParams.initialClientX) * 2;
                }
            }
            else {
                if (resizeParams.handleUsed === "left") {
                    newWidth =
                        resizeParams.initialWidth +
                            resizeParams.initialClientX -
                            event.clientX;
                }
                else {
                    newWidth =
                        resizeParams.initialWidth +
                            event.clientX -
                            resizeParams.initialClientX;
                }
            }
            // Min child width in px.
            const minWidth = 64;
            // Ensures the child is not wider than the editor and not smaller than a
            // predetermined minimum width.
            if (newWidth < minWidth) {
                props.setWidth(minWidth);
            }
            else if (newWidth > props.editor.domElement.firstElementChild.clientWidth) {
                props.setWidth(props.editor.domElement.firstElementChild.clientWidth);
            }
            else {
                props.setWidth(newWidth);
            }
        };
        // Stops mouse movements from resizing the child and updates the block's
        // `width` prop to the new value.
        const windowMouseUpHandler = () => {
            setResizeParams(undefined);
            props.editor.updateBlock(props.block, {
                props: {
                    previewWidth: props.width,
                },
            });
        };
        if (resizeParams) {
            window.addEventListener("mousemove", windowMouseMoveHandler);
            window.addEventListener("mouseup", windowMouseUpHandler);
        }
        return () => {
            window.removeEventListener("mousemove", windowMouseMoveHandler);
            window.removeEventListener("mouseup", windowMouseUpHandler);
        };
    }, [props, resizeParams]);
    // Shows the resize handles when hovering over the child with the cursor.
    const childWrapperMouseEnterHandler = useCallback(() => {
        if (props.editor.isEditable) {
            setChildHovered(true);
        }
    }, [props.editor.isEditable]);
    // Hides the resize handles when the cursor leaves the child, unless the
    // cursor moves to one of the resize handles.
    const childWrapperMouseLeaveHandler = useCallback(() => {
        setChildHovered(false);
    }, []);
    // Sets the resize params, allowing the user to begin resizing the child by
    // moving the cursor left or right.
    const leftResizeHandleMouseDownHandler = useCallback((event) => {
        event.preventDefault();
        setResizeParams({
            handleUsed: "left",
            initialWidth: props.width,
            initialClientX: event.clientX,
        });
    }, [props.width]);
    const rightResizeHandleMouseDownHandler = useCallback((event) => {
        event.preventDefault();
        setResizeParams({
            handleUsed: "right",
            initialWidth: props.width,
            initialClientX: event.clientX,
        });
    }, [props.width]);
    return (_jsxs("div", { className: "bn-visual-media-wrapper", onMouseEnter: childWrapperMouseEnterHandler, onMouseLeave: childWrapperMouseLeaveHandler, children: [props.children, (childHovered || resizeParams) && (_jsxs(_Fragment, { children: [_jsx("div", { className: "bn-visual-media-resize-handle", style: { left: "4px" }, onMouseDown: leftResizeHandleMouseDownHandler }), _jsx("div", { className: "bn-visual-media-resize-handle", style: { right: "4px" }, onMouseDown: rightResizeHandleMouseDownHandler })] }))] }));
};
//# sourceMappingURL=fileBlockHelpers.js.map