import { jsx as _jsx } from "react/jsx-runtime";
import { videoBlockConfig, videoParse } from "@blocknote/core";
import { useState } from "react";
import { RiVideoFill } from "react-icons/ri";
import { createReactBlockSpec, } from "../../schema/ReactBlockSpec.js";
import { FigureWithCaption, FileBlockWrapper, LinkWithCaption, ResizeHandlesWrapper, } from "../FileBlockContent/fileBlockHelpers.js";
import { useResolveUrl } from "../FileBlockContent/useResolveUrl.js";
export const VideoPreview = (props) => {
    const [width, setWidth] = useState(Math.min(props.block.props.previewWidth, props.editor.domElement.firstElementChild.clientWidth));
    const resolved = useResolveUrl(props.block.props.url);
    if (resolved.loadingState === "loading") {
        return null;
    }
    return (_jsx(ResizeHandlesWrapper, { ...props, width: width, setWidth: setWidth, children: _jsx("video", { className: "bn-visual-media", src: resolved.downloadUrl, controls: true, contentEditable: false, draggable: false, width: width }) }));
};
export const VideoToExternalHTML = (props) => {
    if (!props.block.props.url) {
        return _jsx("p", { children: "Add video" });
    }
    const video = props.block.props.showPreview ? (_jsx("video", { src: props.block.props.url })) : (_jsx("a", { href: props.block.props.url, children: props.block.props.name || props.block.props.url }));
    if (props.block.props.caption) {
        return props.block.props.showPreview ? (_jsx(FigureWithCaption, { caption: props.block.props.caption, children: video })) : (_jsx(LinkWithCaption, { caption: props.block.props.caption, children: video }));
    }
    return video;
};
export const VideoBlock = (props) => {
    return (_jsx(FileBlockWrapper, { ...props, buttonText: props.editor.dictionary.file_blocks.video.add_button_text, buttonIcon: _jsx(RiVideoFill, { size: 24 }), children: _jsx(VideoPreview, { block: props.block, editor: props.editor }) }));
};
export const ReactVideoBlock = createReactBlockSpec(videoBlockConfig, {
    render: VideoBlock,
    parse: videoParse,
    toExternalHTML: VideoToExternalHTML,
});
//# sourceMappingURL=VideoBlockContent.js.map