import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from "react";
import { useComponentsContext } from "../../editor/ComponentsContext.js";
import { useDictionary } from "../../i18n/dictionary.js";
export function SuggestionMenu(props) {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const { items, loadingState, selectedIndex, onItemClick } = props;
    const loader = loadingState === "loading-initial" || loadingState === "loading" ? (_jsx(Components.SuggestionMenu.Loader, { className: "bn-suggestion-menu-loader", children: dict.suggestion_menu.loading })) : null;
    const renderedItems = useMemo(() => {
        let currentGroup = undefined;
        const renderedItems = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.group !== currentGroup) {
                currentGroup = item.group;
                renderedItems.push(_jsx(Components.SuggestionMenu.Label, { className: "bn-suggestion-menu-label", children: currentGroup }, currentGroup));
            }
            renderedItems.push(_jsx(Components.SuggestionMenu.Item, { className: "bn-suggestion-menu-item", item: item, id: `bn-suggestion-menu-item-${i}`, isSelected: i === selectedIndex, onClick: () => onItemClick?.(item) }, item.title));
        }
        return renderedItems;
    }, [Components, items, onItemClick, selectedIndex]);
    return (_jsxs(Components.SuggestionMenu.Root, { id: "bn-suggestion-menu", className: "bn-suggestion-menu", children: [renderedItems, renderedItems.length === 0 &&
                (props.loadingState === "loading" ||
                    props.loadingState === "loaded") && (_jsx(Components.SuggestionMenu.EmptyItem, { className: "bn-suggestion-menu-item", children: dict.suggestion_menu.no_items_title })), loader] }));
}
//# sourceMappingURL=SuggestionMenu.js.map