import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect } from "react";
import { useBlockNoteContext } from "../../editor/BlockNoteContext.js";
import { useBlockNoteEditor } from "../../hooks/useBlockNoteEditor.js";
import { useCloseSuggestionMenuNoItems } from "./hooks/useCloseSuggestionMenuNoItems.js";
import { useLoadSuggestionMenuItems } from "./hooks/useLoadSuggestionMenuItems.js";
import { useSuggestionMenuKeyboardNavigation } from "./hooks/useSuggestionMenuKeyboardNavigation.js";
export function SuggestionMenuWrapper(props) {
    const ctx = useBlockNoteContext();
    const setContentEditableProps = ctx.setContentEditableProps;
    const editor = useBlockNoteEditor();
    const { getItems, suggestionMenuComponent, query, clearQuery, closeMenu, onItemClick, } = props;
    const onItemClickCloseMenu = useCallback((item) => {
        closeMenu();
        clearQuery();
        onItemClick?.(item);
    }, [onItemClick, closeMenu, clearQuery]);
    const { items, usedQuery, loadingState } = useLoadSuggestionMenuItems(query, getItems);
    useCloseSuggestionMenuNoItems(items, usedQuery, closeMenu);
    const { selectedIndex } = useSuggestionMenuKeyboardNavigation(editor, query, items, onItemClickCloseMenu);
    // set basic aria attributes when the menu is open
    useEffect(() => {
        setContentEditableProps((p) => ({
            ...p,
            "aria-expanded": true,
            "aria-controls": "bn-suggestion-menu",
        }));
        return () => {
            setContentEditableProps((p) => ({
                ...p,
                "aria-expanded": false,
                "aria-controls": undefined,
            }));
        };
    }, [setContentEditableProps]);
    // set selected item (activedescendent) attributes when selected item changes
    useEffect(() => {
        setContentEditableProps((p) => ({
            ...p,
            "aria-activedescendant": selectedIndex
                ? "bn-suggestion-menu-item-" + selectedIndex
                : undefined,
        }));
        return () => {
            setContentEditableProps((p) => ({
                ...p,
                "aria-activedescendant": undefined,
            }));
        };
    }, [setContentEditableProps, selectedIndex]);
    const Component = suggestionMenuComponent;
    return (_jsx(Component, { items: items, onItemClick: onItemClickCloseMenu, loadingState: loadingState, selectedIndex: selectedIndex }));
}
//# sourceMappingURL=SuggestionMenuWrapper.js.map