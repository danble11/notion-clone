import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useComponentsContext } from "../../editor/ComponentsContext.js";
import { useDictionary } from "../../i18n/dictionary.js";
import { ColorIcon } from "./ColorIcon.js";
const colors = [
    "default",
    "gray",
    "brown",
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "purple",
    "pink",
];
export const ColorPicker = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const TextColorSection = () => props.text ? (_jsxs(_Fragment, { children: [_jsx(Components.Generic.Menu.Label, { children: dict.color_picker.text_title }), colors.map((color) => (_jsx(Components.Generic.Menu.Item, { onClick: () => {
                    props.onClick && props.onClick();
                    props.text.setColor(color);
                }, "data-test": "text-color-" + color, icon: _jsx(ColorIcon, { textColor: color, size: props.iconSize }), checked: props.text.color === color, children: dict.color_picker.colors[color] }, "text-color-" + color)))] })) : null;
    const BackgroundColorSection = () => props.background ? (_jsxs(_Fragment, { children: [_jsx(Components.Generic.Menu.Label, { children: dict.color_picker.background_title }), colors.map((color) => (_jsx(Components.Generic.Menu.Item, { onClick: () => {
                    props.onClick && props.onClick();
                    props.background.setColor(color);
                }, "data-test": "background-color-" + color, icon: _jsx(ColorIcon, { backgroundColor: color, size: props.iconSize }), checked: props.background.color === color, children: dict.color_picker.colors[color] }, "background-color-" + color)))] })) : null;
    return (_jsxs(_Fragment, { children: [_jsx(TextColorSection, {}), _jsx(BackgroundColorSection, {})] }));
};
//# sourceMappingURL=ColorPicker.js.map