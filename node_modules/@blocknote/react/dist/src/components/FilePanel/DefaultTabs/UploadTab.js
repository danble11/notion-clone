import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useEffect, useState } from "react";
import { useComponentsContext } from "../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../hooks/useBlockNoteEditor.js";
import { useDictionary } from "../../../i18n/dictionary.js";
export const UploadTab = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const { block, setLoading } = props;
    const editor = useBlockNoteEditor();
    const [uploadFailed, setUploadFailed] = useState(false);
    useEffect(() => {
        if (uploadFailed) {
            setTimeout(() => {
                setUploadFailed(false);
            }, 3000);
        }
    }, [uploadFailed]);
    const handleFileChange = useCallback((file) => {
        if (file === null) {
            return;
        }
        async function upload(file) {
            setLoading(true);
            if (editor.uploadFile !== undefined) {
                try {
                    let updateData = await editor.uploadFile(file);
                    if (typeof updateData === "string") {
                        // received a url
                        updateData = {
                            props: {
                                name: file.name,
                                url: updateData,
                            },
                        };
                    }
                    editor.updateBlock(block, updateData);
                }
                catch (e) {
                    setUploadFailed(true);
                }
                finally {
                    setLoading(false);
                }
            }
        }
        upload(file);
    }, [block, editor, setLoading]);
    const config = editor.schema.blockSchema[block.type];
    const accept = config.isFileBlock && config.fileBlockAccept?.length
        ? config.fileBlockAccept.join(",")
        : "*/*";
    return (_jsxs(Components.FilePanel.TabPanel, { className: "bn-tab-panel", children: [_jsx(Components.FilePanel.FileInput, { className: "bn-file-input", "data-test": "upload-input", accept: accept, placeholder: dict.file_panel.upload.file_placeholder[block.type] ||
                    dict.file_panel.upload.file_placeholder["file"], value: null, onChange: handleFileChange }), uploadFailed && (_jsx("div", { className: "bn-error-text", children: dict.file_panel.upload.upload_error }))] }));
};
//# sourceMappingURL=UploadTab.js.map