import { jsx as _jsx } from "react/jsx-runtime";
import { useComponentsContext } from "../../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../../hooks/useBlockNoteEditor.js";
import { useDictionary } from "../../../../i18n/dictionary.js";
export const AddRowButton = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    return (_jsx(Components.Generic.Menu.Item, { onClick: () => {
            const emptyCol = props.block.content.rows[props.index].cells.map(() => []);
            const rows = [...props.block.content.rows];
            rows.splice(props.index + (props.side === "below" ? 1 : 0), 0, {
                cells: emptyCol,
            });
            editor.updateBlock(props.block, {
                type: "table",
                content: {
                    type: "tableContent",
                    columnWidths: props.block.content.columnWidths,
                    rows,
                },
            });
            // Have to reset text cursor position to the block as `updateBlock`
            // moves the existing selection out of the block.
            editor.setTextCursorPosition(props.block);
        }, children: dict.table_handle[`add_${props.side}_menuitem`] }));
};
export const AddColumnButton = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    return (_jsx(Components.Generic.Menu.Item, { onClick: () => {
            const columnWidths = [...props.block.content.columnWidths];
            columnWidths.splice(props.index + (props.side === "right" ? 1 : 0), 0, undefined);
            const content = {
                type: "tableContent",
                columnWidths,
                rows: props.block.content.rows.map((row) => {
                    const cells = [...row.cells];
                    cells.splice(props.index + (props.side === "right" ? 1 : 0), 0, []);
                    return { cells };
                }),
            };
            editor.updateBlock(props.block, {
                type: "table",
                content: content,
            });
            // Have to reset text cursor position to the block as `updateBlock`
            // moves the existing selection out of the block.
            editor.setTextCursorPosition(props.block);
        }, children: dict.table_handle[`add_${props.side}_menuitem`] }));
};
export const AddButton = (props) => props.orientation === "row" ? (_jsx(AddRowButton, { ...props, side: props.side })) : (_jsx(AddColumnButton, { ...props, side: props.side }));
//# sourceMappingURL=AddButton.js.map