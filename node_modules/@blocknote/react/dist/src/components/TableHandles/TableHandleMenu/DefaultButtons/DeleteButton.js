import { jsx as _jsx } from "react/jsx-runtime";
import { useComponentsContext } from "../../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../../hooks/useBlockNoteEditor.js";
import { useDictionary } from "../../../../i18n/dictionary.js";
export const DeleteRowButton = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    return (_jsx(Components.Generic.Menu.Item, { onClick: () => {
            const content = {
                type: "tableContent",
                columnWidths: props.block.content.columnWidths,
                rows: props.block.content.rows.filter((_, index) => index !== props.index),
            };
            editor.updateBlock(props.block, {
                type: "table",
                content,
            });
            // Have to reset text cursor position to the block as `updateBlock`
            // moves the existing selection out of the block.
            editor.setTextCursorPosition(props.block);
        }, children: dict.table_handle.delete_row_menuitem }));
};
export const DeleteColumnButton = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    return (_jsx(Components.Generic.Menu.Item, { onClick: () => {
            const content = {
                type: "tableContent",
                columnWidths: props.block.content.columnWidths.filter((_, index) => index !== props.index),
                rows: props.block.content.rows.map((row) => ({
                    cells: row.cells.filter((_, index) => index !== props.index),
                })),
            };
            editor.updateBlock(props.block, {
                type: "table",
                content,
            });
            // Have to reset text cursor position to the block as `updateBlock`
            // moves the existing selection out of the block.
            editor.setTextCursorPosition(props.block);
        }, children: dict.table_handle.delete_column_menuitem }));
};
export const DeleteButton = (props) => props.orientation === "row" ? (_jsx(DeleteRowButton, { ...props })) : (_jsx(DeleteColumnButton, { ...props }));
//# sourceMappingURL=DeleteButton.js.map