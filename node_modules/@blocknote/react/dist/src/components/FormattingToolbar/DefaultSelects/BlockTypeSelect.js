import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo, useState } from "react";
import { RiH1, RiH2, RiH3, RiListCheck3, RiListOrdered, RiListUnordered, RiText, } from "react-icons/ri";
import { useComponentsContext, } from "../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../hooks/useBlockNoteEditor.js";
import { useEditorContentOrSelectionChange } from "../../../hooks/useEditorContentOrSelectionChange.js";
import { useSelectedBlocks } from "../../../hooks/useSelectedBlocks.js";
import { useDictionary } from "../../../i18n/dictionary.js";
export const blockTypeSelectItems = (dict) => [
    {
        name: dict.slash_menu.paragraph.title,
        type: "paragraph",
        icon: RiText,
        isSelected: (block) => block.type === "paragraph",
    },
    {
        name: dict.slash_menu.heading.title,
        type: "heading",
        props: { level: 1 },
        icon: RiH1,
        isSelected: (block) => block.type === "heading" &&
            "level" in block.props &&
            block.props.level === 1,
    },
    {
        name: dict.slash_menu.heading_2.title,
        type: "heading",
        props: { level: 2 },
        icon: RiH2,
        isSelected: (block) => block.type === "heading" &&
            "level" in block.props &&
            block.props.level === 2,
    },
    {
        name: dict.slash_menu.heading_3.title,
        type: "heading",
        props: { level: 3 },
        icon: RiH3,
        isSelected: (block) => block.type === "heading" &&
            "level" in block.props &&
            block.props.level === 3,
    },
    {
        name: dict.slash_menu.bullet_list.title,
        type: "bulletListItem",
        icon: RiListUnordered,
        isSelected: (block) => block.type === "bulletListItem",
    },
    {
        name: dict.slash_menu.numbered_list.title,
        type: "numberedListItem",
        icon: RiListOrdered,
        isSelected: (block) => block.type === "numberedListItem",
    },
    {
        name: dict.slash_menu.check_list.title,
        type: "checkListItem",
        icon: RiListCheck3,
        isSelected: (block) => block.type === "checkListItem",
    },
];
export const BlockTypeSelect = (props) => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    const selectedBlocks = useSelectedBlocks(editor);
    const [block, setBlock] = useState(editor.getTextCursorPosition().block);
    const filteredItems = useMemo(() => {
        return (props.items || blockTypeSelectItems(dict)).filter((item) => item.type in editor.schema.blockSchema);
    }, [editor, dict, props.items]);
    const shouldShow = useMemo(() => filteredItems.find((item) => item.type === block.type) !== undefined, [block.type, filteredItems]);
    const fullItems = useMemo(() => {
        const onClick = (item) => {
            editor.focus();
            for (const block of selectedBlocks) {
                editor.updateBlock(block, {
                    type: item.type,
                    props: item.props,
                });
            }
        };
        return filteredItems.map((item) => {
            const Icon = item.icon;
            return {
                text: item.name,
                icon: _jsx(Icon, { size: 16 }),
                onClick: () => onClick(item),
                isSelected: item.isSelected(block),
            };
        });
    }, [block, filteredItems, editor, selectedBlocks]);
    useEditorContentOrSelectionChange(() => {
        setBlock(editor.getTextCursorPosition().block);
    }, editor);
    if (!shouldShow || !editor.isEditable) {
        return null;
    }
    return (_jsx(Components.FormattingToolbar.Select, { className: "bn-select", items: fullItems }));
};
//# sourceMappingURL=BlockTypeSelect.js.map