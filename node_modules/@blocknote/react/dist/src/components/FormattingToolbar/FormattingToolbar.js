import { jsx as _jsx } from "react/jsx-runtime";
import { useComponentsContext } from "../../editor/ComponentsContext.js";
import { BasicTextStyleButton } from "./DefaultButtons/BasicTextStyleButton.js";
import { ColorStyleButton } from "./DefaultButtons/ColorStyleButton.js";
import { CreateLinkButton } from "./DefaultButtons/CreateLinkButton.js";
import { FileCaptionButton } from "./DefaultButtons/FileCaptionButton.js";
import { FileDeleteButton } from "./DefaultButtons/FileDeleteButton.js";
import { FileRenameButton } from "./DefaultButtons/FileRenameButton.js";
import { FileReplaceButton } from "./DefaultButtons/FileReplaceButton.js";
import { NestBlockButton, UnnestBlockButton, } from "./DefaultButtons/NestBlockButtons.js";
import { BlockTypeSelect, } from "./DefaultSelects/BlockTypeSelect.js";
import { FileDownloadButton } from "./DefaultButtons/FileDownloadButton.js";
import { FilePreviewButton } from "./DefaultButtons/FilePreviewButton.js";
import { TextAlignButton } from "./DefaultButtons/TextAlignButton.js";
export const getFormattingToolbarItems = (blockTypeSelectItems) => [
    _jsx(BlockTypeSelect, { items: blockTypeSelectItems }, "blockTypeSelect"),
    _jsx(FileCaptionButton, {}, "fileCaptionButton"),
    _jsx(FileReplaceButton, {}, "replaceFileButton"),
    _jsx(FileRenameButton, {}, "fileRenameButton"),
    _jsx(FileDeleteButton, {}, "fileDeleteButton"),
    _jsx(FileDownloadButton, {}, "fileDownloadButton"),
    _jsx(FilePreviewButton, {}, "filePreviewButton"),
    _jsx(BasicTextStyleButton, { basicTextStyle: "bold" }, "boldStyleButton"),
    _jsx(BasicTextStyleButton, { basicTextStyle: "italic" }, "italicStyleButton"),
    _jsx(BasicTextStyleButton, { basicTextStyle: "underline" }, "underlineStyleButton"),
    _jsx(BasicTextStyleButton, { basicTextStyle: "strike" }, "strikeStyleButton"),
    _jsx(TextAlignButton, { textAlignment: "left" }, "textAlignLeftButton"),
    _jsx(TextAlignButton, { textAlignment: "center" }, "textAlignCenterButton"),
    _jsx(TextAlignButton, { textAlignment: "right" }, "textAlignRightButton"),
    _jsx(ColorStyleButton, {}, "colorStyleButton"),
    _jsx(NestBlockButton, {}, "nestBlockButton"),
    _jsx(UnnestBlockButton, {}, "unnestBlockButton"),
    _jsx(CreateLinkButton, {}, "createLinkButton"),
];
// TODO: props.blockTypeSelectItems should only be available if no children
//  are passed
/**
 * By default, the FormattingToolbar component will render with default
 * selects/buttons. However, you can override the selects/buttons to render
 * by passing children. The children you pass should be:
 *
 * - Default selects: Components found within the `/DefaultSelects` directory.
 * - Default buttons: Components found within the `/DefaultButtons` directory.
 * - Custom selects: The `ToolbarSelect` component in the
 * `components/mantine-shared/Toolbar` directory.
 * - Custom buttons: The `ToolbarButton` component in the
 * `components/mantine-shared/Toolbar` directory.
 */
export const FormattingToolbar = (props) => {
    const Components = useComponentsContext();
    return (_jsx(Components.FormattingToolbar.Root, { className: "bn-toolbar bn-formatting-toolbar", children: props.children || getFormattingToolbarItems(props.blockTypeSelectItems) }));
};
//# sourceMappingURL=FormattingToolbar.js.map