import { jsx as _jsx } from "react/jsx-runtime";
import { checkBlockIsFileBlockWithPlaceholder, checkBlockIsFileBlockWithPreview, } from "@blocknote/core";
import { useCallback, useMemo } from "react";
import { RiImageAddFill } from "react-icons/ri";
import { useComponentsContext } from "../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../hooks/useBlockNoteEditor.js";
import { useSelectedBlocks } from "../../../hooks/useSelectedBlocks.js";
import { useDictionary } from "../../../i18n/dictionary.js";
export const FilePreviewButton = () => {
    const dict = useDictionary();
    const Components = useComponentsContext();
    const editor = useBlockNoteEditor();
    const selectedBlocks = useSelectedBlocks(editor);
    const fileBlock = useMemo(() => {
        // Checks if only one block is selected.
        if (selectedBlocks.length !== 1) {
            return undefined;
        }
        const block = selectedBlocks[0];
        if (checkBlockIsFileBlockWithPreview(block, editor)) {
            return block;
        }
        return undefined;
    }, [editor, selectedBlocks]);
    const onClick = useCallback(() => {
        if (fileBlock) {
            editor.updateBlock(fileBlock, {
                props: {
                    showPreview: !fileBlock.props.showPreview, // TODO
                },
            });
        }
    }, [editor, fileBlock]);
    if (!fileBlock ||
        checkBlockIsFileBlockWithPlaceholder(fileBlock, editor) ||
        !editor.isEditable) {
        return null;
    }
    return (_jsx(Components.FormattingToolbar.Button, { className: "bn-button", label: "Toggle preview", mainTooltip: dict.formatting_toolbar.file_preview_toggle.tooltip, icon: _jsx(RiImageAddFill, {}), isSelected: fileBlock.props.showPreview, onClick: onClick }));
};
//# sourceMappingURL=FilePreviewButton.js.map