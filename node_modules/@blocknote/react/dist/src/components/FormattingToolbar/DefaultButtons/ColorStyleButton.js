import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useMemo, useState } from "react";
import { useComponentsContext } from "../../../editor/ComponentsContext.js";
import { useBlockNoteEditor } from "../../../hooks/useBlockNoteEditor.js";
import { useEditorContentOrSelectionChange } from "../../../hooks/useEditorContentOrSelectionChange.js";
import { useSelectedBlocks } from "../../../hooks/useSelectedBlocks.js";
import { useDictionary } from "../../../i18n/dictionary.js";
import { ColorIcon } from "../../ColorPicker/ColorIcon.js";
import { ColorPicker } from "../../ColorPicker/ColorPicker.js";
function checkColorInSchema(color, editor) {
    return (`${color}Color` in editor.schema.styleSchema &&
        editor.schema.styleSchema[`${color}Color`].type === `${color}Color` &&
        editor.schema.styleSchema[`${color}Color`].propSchema === "string");
}
export const ColorStyleButton = () => {
    const Components = useComponentsContext();
    const dict = useDictionary();
    const editor = useBlockNoteEditor();
    const textColorInSchema = checkColorInSchema("text", editor);
    const backgroundColorInSchema = checkColorInSchema("background", editor);
    const selectedBlocks = useSelectedBlocks(editor);
    const [currentTextColor, setCurrentTextColor] = useState(textColorInSchema
        ? editor.getActiveStyles().textColor || "default"
        : "default");
    const [currentBackgroundColor, setCurrentBackgroundColor] = useState(backgroundColorInSchema
        ? editor.getActiveStyles().backgroundColor || "default"
        : "default");
    useEditorContentOrSelectionChange(() => {
        if (textColorInSchema) {
            setCurrentTextColor(editor.getActiveStyles().textColor || "default");
        }
        if (backgroundColorInSchema) {
            setCurrentBackgroundColor(editor.getActiveStyles().backgroundColor || "default");
        }
    }, editor);
    const setTextColor = useCallback((color) => {
        if (!textColorInSchema) {
            throw Error("Tried to set text color, but style does not exist in editor schema.");
        }
        color === "default"
            ? editor.removeStyles({ textColor: color })
            : editor.addStyles({ textColor: color });
        setTimeout(() => {
            // timeout needed to ensure compatibility with Mantine Toolbar useFocusTrap
            editor.focus();
        });
    }, [editor, textColorInSchema]);
    const setBackgroundColor = useCallback((color) => {
        if (!backgroundColorInSchema) {
            throw Error("Tried to set background color, but style does not exist in editor schema.");
        }
        color === "default"
            ? editor.removeStyles({ backgroundColor: color })
            : editor.addStyles({ backgroundColor: color });
        setTimeout(() => {
            // timeout needed to ensure compatibility with Mantine Toolbar useFocusTrap
            editor.focus();
        });
    }, [backgroundColorInSchema, editor]);
    const show = useMemo(() => {
        if (!textColorInSchema && !backgroundColorInSchema) {
            return false;
        }
        for (const block of selectedBlocks) {
            if (block.content !== undefined) {
                return true;
            }
        }
        return false;
    }, [backgroundColorInSchema, selectedBlocks, textColorInSchema]);
    if (!show || !editor.isEditable) {
        return null;
    }
    return (_jsxs(Components.Generic.Menu.Root, { children: [_jsx(Components.Generic.Menu.Trigger, { children: _jsx(Components.FormattingToolbar.Button, { className: "bn-button", "data-test": "colors", label: dict.formatting_toolbar.colors.tooltip, mainTooltip: dict.formatting_toolbar.colors.tooltip, icon: _jsx(ColorIcon, { textColor: currentTextColor, backgroundColor: currentBackgroundColor, size: 20 }) }) }), _jsx(Components.Generic.Menu.Dropdown, { className: "bn-menu-dropdown bn-color-picker-dropdown", children: _jsx(ColorPicker, { text: textColorInSchema
                        ? {
                            color: currentTextColor,
                            setColor: setTextColor,
                        }
                        : undefined, background: backgroundColorInSchema
                        ? {
                            color: currentBackgroundColor,
                            setColor: setBackgroundColor,
                        }
                        : undefined }) })] }));
};
//# sourceMappingURL=ColorStyleButton.js.map