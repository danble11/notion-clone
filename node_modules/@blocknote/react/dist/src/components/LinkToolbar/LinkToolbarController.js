import { jsx as _jsx } from "react/jsx-runtime";
import { flip, offset } from "@floating-ui/react";
import { useBlockNoteEditor } from "../../hooks/useBlockNoteEditor.js";
import { useUIElementPositioning } from "../../hooks/useUIElementPositioning.js";
import { useUIPluginState } from "../../hooks/useUIPluginState.js";
import { LinkToolbar } from "./LinkToolbar.js";
export const LinkToolbarController = (props) => {
    const editor = useBlockNoteEditor();
    const callbacks = {
        deleteLink: editor.linkToolbar.deleteLink,
        editLink: editor.linkToolbar.editLink,
        startHideTimer: editor.linkToolbar.startHideTimer,
        stopHideTimer: editor.linkToolbar.stopHideTimer,
    };
    const state = useUIPluginState(editor.linkToolbar.onUpdate.bind(editor.linkToolbar));
    const { isMounted, ref, style, getFloatingProps } = useUIElementPositioning(state?.show || false, state?.referencePos || null, 4000, {
        placement: "top-start",
        middleware: [offset(10), flip()],
        onOpenChange: (open) => {
            if (!open) {
                editor.linkToolbar.closeMenu();
                editor.focus();
            }
        },
        ...props.floatingOptions,
    });
    if (!isMounted || !state) {
        return null;
    }
    const { show, referencePos, ...data } = state;
    const Component = props.linkToolbar || LinkToolbar;
    return (_jsx("div", { ref: ref, style: style, ...getFloatingProps(), children: _jsx(Component, { ...data, ...callbacks }) }));
};
//# sourceMappingURL=LinkToolbarController.js.map